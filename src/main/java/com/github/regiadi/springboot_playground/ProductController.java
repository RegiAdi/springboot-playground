package com.github.regiadi.springboot_playground;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/products")
public class ProductController {

	private final ProductService productService;

	@Autowired
	public ProductController(ProductService productService) {
		this.productService = productService;
	}

	/**
	 * Creates a new product.
	 * POST /api/products
	 */
	@PostMapping
	public ResponseEntity<Product> createProduct(@RequestBody Product product) {
		// The ID should be null, as it will be generated by the database.
		product.setId(null);
		Product savedProduct = productService.saveProduct(product);
		return new ResponseEntity<>(savedProduct, HttpStatus.CREATED);
	}

	/**
	 * Retrieves all products.
	 * GET /api/products
	 */
	@GetMapping
	public List<Product> getAllProducts() {
		return productService.findAllProducts();
	}

	/**
	 * Retrieves a single product by its ID.
	 * GET /api/products/{id}
	 */
	@GetMapping("/{id}")
	public ResponseEntity<Product> getProductById(@PathVariable UUID id) {
		return productService.findProductById(id)
				.map(ResponseEntity::ok)
				.orElse(ResponseEntity.notFound().build());
	}

	/**
	 * Updates an existing product.
	 * PUT /api/products/{id}
	 */
	@PutMapping("/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable UUID id, @RequestBody Product productDetails) {
		return productService.findProductById(id)
				.map(existingProduct -> {
					existingProduct.setName(productDetails.getName());
					existingProduct.setPrice(productDetails.getPrice());
					Product updatedProduct = productService.saveProduct(existingProduct);
					return ResponseEntity.ok(updatedProduct);
				})
				.orElse(ResponseEntity.notFound().build());
	}

	/**
	 * Deletes a product by its ID.
	 * DELETE /api/products/{id}
	 */
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable UUID id) {
		if (productService.findProductById(id).isEmpty()) {
			return ResponseEntity.notFound().build();
		}
		productService.deleteProductById(id);
		return ResponseEntity.noContent().build();
	}
}